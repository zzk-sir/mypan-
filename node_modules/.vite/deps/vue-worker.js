import {
  __commonJS,
  __toESM
} from "./chunk-PR4QN5HX.js";

// node_modules/simple-web-worker/dist/sww.min.js
var require_sww_min = __commonJS({
  "node_modules/simple-web-worker/dist/sww.min.js"(exports, module) {
    "use strict";
    function postAll() {
      var r = this, e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      if (isValid(e)(["arraysArray", "postParamsArray", "stringsArray"])) {
        if (0 === e.length) return Promise.all(this.actions.map(function(e2) {
          var n = e2.message;
          return r.postMessage(n);
        }));
        if (e.every(function(r2) {
          return "string" == typeof r2;
        })) return Promise.all(e.map(function(e2) {
          return r.postMessage(e2);
        }));
        if (e.every(function(r2) {
          return "object" === (void 0 === r2 ? "undefined" : _typeof(r2)) && !Array.isArray(r2);
        })) return Promise.all(e.map(function(e2) {
          var n = e2.message, t = e2.args;
          return r.postMessage(n, t);
        }));
        if (e.every(function(r2) {
          return Array.isArray(r2);
        }) && e.length === this.actions.length) return Promise.all(e.map(function(e2, n) {
          return r.postMessage(r.actions[n].message, e2);
        }));
      }
      return console.error(argumentError(makeOptionsFor(e))), null;
    }
    var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(r) {
      return typeof r;
    } : function(r) {
      return r && "function" == typeof Symbol && r.constructor === Symbol && r !== Symbol.prototype ? "symbol" : typeof r;
    };
    var isValidObjectWith = function(r) {
      return function(e) {
        return !!e && !Array.isArray(e) && r.every(function(r2) {
          return e.hasOwnProperty(r2);
        });
      };
    };
    var isValidAction = function(r) {
      return isValidObjectWith(["message", "func"])(r) && "function" == typeof r.func && "string" == typeof r.message;
    };
    var isValidActionsArray = function(r) {
      return r.every(isValidAction);
    };
    var isValidPostParams = function(r) {
      return isValidObjectWith(["message", "args"])(r) && Array.isArray(r.args) && "string" == typeof r.message;
    };
    var isValidPostParamsArray = function(r) {
      return r.every(isValidPostParams);
    };
    var isValidObjectsArray = function(r) {
      return function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
        return r.every(isValidObjectWith(e));
      };
    };
    var testArray = { actionsArray: function(r) {
      return isValidActionsArray(r);
    }, arraysArray: function(r) {
      return r.every(function(r2) {
        return Array.isArray(r2);
      });
    }, objectsArray: function(r) {
      return isValidObjectsArray(r)();
    }, postParamsArray: function(r) {
      return isValidPostParamsArray(r);
    }, stringsArray: function(r) {
      return r.every(function(r2) {
        return "string" == typeof r2;
      });
    } };
    var isValidArg = function(r) {
      return function(e) {
        return "null" === e ? null === r : "undefined" === e ? void 0 === r : "action" === e ? isValidAction(r) : Array.isArray(r) ? !("array" !== e && !testArray[e]) && ("array" === e || testArray[e](r)) : !!r && (void 0 === r ? "undefined" : _typeof(r)) === e.toString();
      };
    };
    var isValid = function(r) {
      return function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return Array.isArray(e) ? e.some(function(e2) {
          return isValidArg(r)(e2);
        }) : !!isValidArg(r)(e);
      };
    };
    var argumentError = function(r) {
      var e = r.expected, n = void 0 === e ? "" : e, t = r.received, o = r.extraInfo, i = void 0 === o ? "" : o;
      try {
        return new TypeError("You should provide " + n + "\n" + i + "\nReceived: " + JSON.stringify(t));
      } catch (r2) {
        if ("Converting circular structure to JSON" === r2.message) return new TypeError("You should provide " + n + "\n" + i + "\nReceived a circular structure: " + t);
        throw r2;
      }
    };
    var makeResponse = function(r) {
      return "\n  self.onmessage = event => {\n    const args = event.data.message.args\n    if (args) {\n      self.postMessage((" + r + ").apply(null, args))\n      return close()\n    }\n    self.postMessage((" + r + ")())\n    return close()\n  }\n";
    };
    var createDisposableWorker = function(r) {
      var e = window.URL || window.webkitURL, n = new Blob([r], { type: "application/javascript" }), t = e.createObjectURL(n), o = new Worker(t);
      return o.post = function(r2) {
        return new Promise(function(n2, i) {
          o.onmessage = function(r3) {
            e.revokeObjectURL(t), n2(r3.data);
          }, o.onerror = function(r3) {
            console.error("Error: Line " + r3.lineno + " in " + r3.filename + ": " + r3.message), i(r3);
          }, o.postMessage({ message: r2 });
        });
      }, o;
    };
    var run = function() {
      var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, e = arguments[1], n = isValid(r)("function"), t = isValid(e)(["array", "undefined"]);
      if (n && t) {
        return createDisposableWorker(makeResponse(r)).post({ args: e });
      }
      return n || console.error(argumentError({ expected: "a function", received: r })), t || console.error(argumentError({ expected: "an array", received: e })), null;
    };
    var warnWork = function(r) {
      return console.warn("WARN! " + r + " is not a registered action for this worker"), r + " is not a registered action for this worker";
    };
    var post = function(r) {
      return function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, n = arguments[1], t = isValid(e)("string"), o = isValid(n)(["array", "undefined"]);
        if (t && o) {
          var i = r.filter(function(r2) {
            var n2 = r2.message;
            return JSON.stringify(n2) === JSON.stringify(e);
          }).map(function(r2) {
            return r2.func;
          }).pop();
          return i ? n ? run(i, n) : run(i) : run(warnWork, [JSON.stringify(e)]);
        }
        return t || console.error(argumentError({ expected: "a string", received: e })), o || console.error(argumentError({ expected: "an array", received: n })), null;
      };
    };
    var makeOptionsFor = function(r) {
      return { expected: "an array of arrays, an array of objects, or an array of strings", received: r, extraInfo: "If an array of arrays, it must have the same length as the actions registered for this worker.\nIf an array of objects, every object must containing two fields:\n* message\n* args" };
    };
    var isActionOf = function(r) {
      return function(e) {
        return r.some(function(r2) {
          return r2.message === e.message;
        });
      };
    };
    var warnMsg = function(r) {
      return 'WARN! An action with message "' + r.message + '" is already registered for this worker';
    };
    var pushInto = function(r) {
      return function(e) {
        return isActionOf(r)(e) ? (console.warn(warnMsg(e)), r.length) : r.push(e);
      };
    };
    var makeOptionsFor$1 = function(r) {
      return { expected: "an array of actions or an action", received: r, extraInfo: "Every action should be an object containing two fields:\n* message\n* func" };
    };
    var register = function(r) {
      return function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return isValid(e)(["action", "actionsArray"]) ? Array.isArray(e) ? e.reduce(function(r2, e2) {
          return pushInto(r2)(e2), r2;
        }, r).length : pushInto(r)(e) : (console.error(argumentError(makeOptionsFor$1(e))), null);
      };
    };
    var removeFrom = function(r) {
      return function(e) {
        var n = r.findIndex(function(r2) {
          return r2.message === e;
        });
        return -1 === n ? console.warn('WARN! Impossible to unregister action with message "' + e + '".\nIt is not a registered action for this worker.') : r.splice(n, 1), r;
      };
    };
    var makeOptions = function(r) {
      return { expected: "an array of strings or a string", received: r };
    };
    var unregister = function(r) {
      return function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        return isValid(e)(["string", "stringsArray"]) ? Array.isArray(e) ? e.reduce(function(r2, e2) {
          return removeFrom(r2)(e2), r2;
        }, r).length : removeFrom(r)(e).length : (console.error(argumentError(makeOptions(e))), null);
      };
    };
    var options = function(r) {
      return { expected: "an array of objects", received: r, extraInfo: "Every action should be an object containing two fields:\n* message\n* func" };
    };
    var create = function() {
      var r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      return isValid(r)("actionsArray") ? { actions: r, postMessage: post(r), postAll, register: register(r), unregister: unregister(r) } : (console.error(argumentError(options(r))), null);
    };
    var createWrapper = function() {
      return window.Worker ? window.URL.createObjectURL || window.webkitURL.createObjectURL ? { create, run } : (console.error("This browser does not have URL.createObjectURL method."), null) : (console.error("This browser does not support Workers."), null);
    };
    var WorkerWrapper = createWrapper();
    module.exports = WorkerWrapper;
  }
});

// node_modules/vue-worker/index.js
var import_simple_web_worker = __toESM(require_sww_min());
var vue_worker_default = {
  install: function(Vue, name) {
    name = name || "$worker";
    Object.defineProperty(Vue.prototype, name, { value: import_simple_web_worker.default });
  }
};
export {
  vue_worker_default as default
};
//# sourceMappingURL=vue-worker.js.map
