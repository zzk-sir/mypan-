{
  "version": 3,
  "sources": ["../../simple-web-worker/src/postAll.js", "../../simple-web-worker/src/utils.js", "../../simple-web-worker/src/createDisposableWorker.js", "../../simple-web-worker/src/run.js", "../../simple-web-worker/src/post.js", "../../simple-web-worker/src/register.js", "../../simple-web-worker/src/unregister.js", "../../simple-web-worker/src/create.js", "../../simple-web-worker/src/index.js", "../../vue-worker/index.js"],
  "sourcesContent": ["// import { invalidObjectsArray, isArrayOf, notArray, returnNull, wrongLength, wrongObjects } from './utils'\nimport { isValid, argumentError } from './utils'\n\nconst makeOptionsFor = arr => {\n  return {\n    expected: 'an array of arrays, an array of objects, or an array of strings',\n    received: arr,\n    extraInfo: 'If an array of arrays, ' +\n      'it must have the same length as the actions registered for this worker.\\n' +\n      'If an array of objects, every object must containing two fields:\\n* message\\n* args'\n  }\n}\nexport function postAll (arr = []) {\n  if (isValid(arr)(['arraysArray', 'postParamsArray', 'stringsArray'])) {\n    if (arr.length === 0) return Promise.all(this.actions.map(({ message }) => this.postMessage(message)))\n\n    if (arr.every(item => typeof item === 'string')) {\n      return Promise.all(arr.map(msg => this.postMessage(msg)))\n    }\n\n    if (arr.every(item => typeof item === 'object' && !Array.isArray(item))) {\n      return Promise.all(arr.map(({ message, args }) => this.postMessage(message, args)))\n    }\n\n    if (arr.every(item => Array.isArray(item)) && arr.length === this.actions.length) {\n      return Promise.all(arr.map((args, index) => this.postMessage(this.actions[index].message, args)))\n    }\n  }\n\n  console.error(argumentError(makeOptionsFor(arr)))\n  return null\n}\n", "// Argument validation\nconst isValidObjectWith = fields => obj =>\n  !!obj && !Array.isArray(obj) && fields.every(field => obj.hasOwnProperty(field))\n\nconst isValidAction = obj => {\n  return isValidObjectWith(['message', 'func'])(obj) &&\n    typeof obj.func === 'function' && typeof obj.message === 'string'\n}\n\nconst isValidActionsArray = arr => arr.every(isValidAction)\n\nconst isValidPostParams = obj => {\n  return isValidObjectWith(['message', 'args'])(obj) &&\n    Array.isArray(obj.args) && typeof obj.message === 'string'\n}\n\nconst isValidPostParamsArray = arr => arr.every(isValidPostParams)\n\nconst isValidObjectsArray = arr => (fields = []) =>\n  arr.every(isValidObjectWith(fields))\n\nconst testArray = {\n  'actionsArray': arr => isValidActionsArray(arr),\n  'arraysArray': arr => arr.every(item => Array.isArray(item)),\n  'objectsArray': arr => isValidObjectsArray(arr)(),\n  'postParamsArray': arr => isValidPostParamsArray(arr),\n  'stringsArray': arr => arr.every(item => typeof item === 'string')\n}\n\nconst isValidArg = arg => type => {\n  if (type === 'null') return arg === null\n  if (type === 'undefined') return arg === undefined\n  if (type === 'action') return isValidAction(arg)\n  if (Array.isArray(arg)) {\n    if (type !== 'array' && !testArray[type]) return false\n    if (type === 'array') return true\n    return testArray[type](arg)\n  }\n  if (arg) return typeof arg === type.toString() // eslint-disable-line\n  return false\n}\n\nconst isValid = argument => (types = null) => {\n  if (Array.isArray(types)) return types.some(type => isValidArg(argument)(type))\n  if (isValidArg(argument)(types)) return true\n  return false\n}\n\n// Argument error builder\nconst argumentError = ({ expected = '', received, extraInfo = '' }) => {\n  try {\n    return new TypeError(`${'You should provide ' + expected}${'\\n' + extraInfo}${'\\nReceived: ' + JSON.stringify(received)}`)\n  } catch (err) {\n    if (err.message === 'Converting circular structure to JSON') {\n      return new TypeError(`${'You should provide ' + expected}${'\\n' + extraInfo}${'\\nReceived a circular structure: ' + received}`)\n    }\n    throw err\n  }\n}\n\n// Response builder\nconst makeResponse = work => `\n  self.onmessage = event => {\n    const args = event.data.message.args\n    if (args) {\n      self.postMessage((${work}).apply(null, args))\n      return close()\n    }\n    self.postMessage((${work})())\n    return close()\n  }\n`\n\nexport {\n  makeResponse,\n  argumentError,\n  isValid\n}\n", "export const createDisposableWorker = response => {\n  const URL = window.URL || window.webkitURL\n  const blob = new Blob([response], { type: 'application/javascript' }) // eslint-disable-line\n  const objectURL = URL.createObjectURL(blob)\n  const worker = new Worker(objectURL) // eslint-disable-line\n  worker.post = message =>\n    new Promise((resolve, reject) => {\n      worker.onmessage = event => {\n        URL.revokeObjectURL(objectURL)\n        resolve(event.data)\n      }\n      worker.onerror = e => {\n        console.error(`Error: Line ${e.lineno} in ${e.filename}: ${e.message}`)\n        reject(e)\n      }\n      worker.postMessage({ message })\n    })\n  return worker\n}\n", "import { argumentError, isValid, makeResponse } from './utils'\nimport { createDisposableWorker } from './createDisposableWorker'\n\nexport const run = (work = null, args) => {\n  const validWork = isValid(work)('function')\n  const validArgs = isValid(args)(['array', 'undefined'])\n  if (validWork && validArgs) {\n    const worker = createDisposableWorker(makeResponse(work))\n    return worker.post({ args })\n  }\n  if (!validWork) console.error(argumentError({ expected: 'a function', received: work }))\n  if (!validArgs) console.error(argumentError({ expected: 'an array', received: args }))\n  return null\n}\n", "import { argumentError, isValid } from './utils'\nimport { run } from './run'\n\nconst warnWork = msg => {\n  console.warn(`WARN! ${msg} is not a registered action for this worker`)\n  return `${msg} is not a registered action for this worker`\n}\n\nexport const post = actions => (msg = null, args) => {\n  const validMessage = isValid(msg)('string')\n  const validArgs = isValid(args)(['array', 'undefined'])\n  if (validMessage && validArgs) {\n    const work = actions\n      .filter(({ message }) => JSON.stringify(message) === JSON.stringify(msg))\n      .map(action => action.func)\n      .pop()\n\n    if (!work) return run(warnWork, [JSON.stringify(msg)])\n    if (args) return run(work, args)\n    return run(work)\n  }\n\n  if (!validMessage) console.error(argumentError({ expected: 'a string', received: msg }))\n  if (!validArgs) console.error(argumentError({ expected: 'an array', received: args }))\n  return null\n}\n", "import { argumentError, isValid } from './utils'\n\nconst isActionOf = actions => newAction =>\n  actions.some(action => action.message === newAction.message)\n\nconst warnMsg = action =>\n  `WARN! An action with message \"${action.message}\" is already registered for this worker`\n\nconst pushInto = actions => action => {\n  if (isActionOf(actions)(action)) {\n    console.warn(warnMsg(action))\n    return actions.length\n  }\n  return actions.push(action)\n}\n\nconst makeOptionsFor = action => {\n  return {\n    expected: 'an array of actions or an action',\n    received: action,\n    extraInfo: 'Every action should be an object containing two fields:\\n* message\\n* func'\n  }\n}\n\nexport const register = actions => (action = null) => {\n  if (isValid(action)(['action', 'actionsArray'])) {\n    if (Array.isArray(action)) {\n      return action.reduce((actions, action) => {\n        pushInto(actions)(action)\n        return actions\n      }, actions).length\n    }\n\n    return pushInto(actions)(action)\n  }\n  console.error((argumentError(makeOptionsFor(action))))\n  return null\n}\n", "import { argumentError, isValid } from './utils'\n\nconst removeFrom = actions => msg => {\n  const index = actions.findIndex(({ message }) => message === msg)\n  index === -1\n    ? console.warn(`WARN! Impossible to unregister action with message \"${msg}\".\\nIt is not a registered action for this worker.`)\n    : actions.splice(index, 1)\n  return actions\n}\n\nconst makeOptions = msg => {\n  return {\n    expected: 'an array of strings or a string',\n    received: msg\n  }\n}\n\nexport const unregister = actions => (msg = null) => {\n  if (isValid(msg)(['string', 'stringsArray'])) {\n    if (Array.isArray(msg)) {\n      return msg.reduce((actions, message) => {\n        removeFrom(actions)(message)\n        return actions\n      }, actions).length\n    }\n    return removeFrom(actions)(msg).length\n  }\n\n  console.error(argumentError(makeOptions(msg)))\n  return null\n}\n", "import { argumentError, isValid } from './utils'\nimport { post } from './post'\nimport { postAll } from './postAll'\nimport { register } from './register'\nimport { unregister } from './unregister'\n\nconst options = actions => {\n  return {\n    expected: 'an array of objects',\n    received: actions,\n    extraInfo: 'Every action should be an object containing two fields:\\n* message\\n* func'\n  }\n}\n\nexport const create = (actions = []) => {\n  if (isValid(actions)('actionsArray')) {\n    return {\n      actions: actions,\n      postMessage: post(actions),\n      postAll: postAll,\n      register: register(actions),\n      unregister: unregister(actions)\n    }\n  }\n  console.error(argumentError(options(actions)))\n  return null\n}\n", "import { create } from './create'\nimport { run } from './run'\n\nconst createWrapper = () => {\n  if (!window.Worker) {\n    console.error('This browser does not support Workers.')\n    return null\n  }\n  if (!(window.URL.createObjectURL || window.webkitURL.createObjectURL)) {\n    console.error('This browser does not have URL.createObjectURL method.')\n    return null\n  }\n  return { create, run }\n}\n\nconst WorkerWrapper = createWrapper()\n\nexport default WorkerWrapper\n", "import SimpleWebWorker from 'simple-web-worker'\n\nexport default {\n  install: function(Vue, name) {\n    name = name || '$worker'\n    Object.defineProperty(Vue.prototype, name, { value: SimpleWebWorker })\n  }\n}\n"],
  "mappings": "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",
  "names": ["postAll", "arr", "isValid", "length", "Promise", "all", "this", "actions", "map", "e", "message", "_this", "postMessage", "every", "r", "item", "msg", "Array", "isArray", "args", "index", "error", "argumentError", "makeOptionsFor", "isValidObjectWith", "obj", "fields", "hasOwnProperty", "field", "isValidAction", "func", "isValidActionsArray", "isValidPostParams", "isValidPostParamsArray", "isValidObjectsArray", "testArray", "isValidArg", "type", "arg", "toString", "types", "some", "argument", "expected", "received", "extraInfo", "TypeError", "JSON", "stringify", "err", "makeResponse", "work", "createDisposableWorker", "URL", "window", "webkitURL", "blob", "Blob", "response", "objectURL", "createObjectURL", "worker", "Worker", "post", "resolve", "reject", "onmessage", "revokeObjectURL", "event", "data", "onerror", "lineno", "filename", "run", "validWork", "validArgs", "console", "warnWork", "warn", "validMessage", "filter", "action", "pop", "isActionOf", "newAction", "warnMsg", "pushInto", "push", "register", "reduce", "removeFrom", "findIndex", "splice", "makeOptions", "unregister", "options", "create", "createWrapper", "WorkerWrapper", "SimpleWebWorker"]
}
